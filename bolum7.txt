7-Düzenli Ýfadeler
Ýçerik
7.1 	Düzenli Ýfadeler: temeller
7.1.1 Düzenli Ýfadeler:Ekstralar
7.2 Dosyalarda metin arama – grep
Hedefler
-basit ve geliþmiþ düzenli ifadeleri formüle edebilme ve anlama
-grep programý ve egrep , fgrep varyasyonlarýný öðrenme
Önceden bilinmesi gerekenler
Linux, kabuk ve komutlarýn temel bilgisine sahip olmak(önceki bölümlerden)
Dosya ve dizinleri yönetme(bölüm 6 )
Metin editörünü kullanmak (bölüm 3)
7.1 Düzenli ifadeler:temeller
Çoðu linux komutlarý metin iþleme için kullanýlýr-tekrar tekrar gözüken “buna benzer bütün satýrlara xyz yap(do xyz)” biçimindeki þablonlar kullanýlýr. Çok kullanýlan dosya satýrlarý ve metinlerin bitlerini tanýmlamak için çok güçlü bir araç,”düzenli ifade”(1) olarak adlandýrýlýr. Ýlk bakýþta düzenli ifadeler þablonlarý araþtýran kabuðun dosya ismine benzer görünür(bölüm 6.3), fakat onlar farklý çalýþýr vedaha çok olanak saðlar. 
Düzenli ifadeler, kendileri düzenli ifadeler olarak düþünülen ilkel ifadelerden “rekürsif” olarak yapýlýr. En basit düzenli ifadeler harfler, rakamlar ve genel karakter kümesinden karakterlerdir. Örneðin ”a”, “a” karakteriyle eþleþen düzenli ifadedir. “abc” düzenli ifadesi, “abc” stringiyle  eþleþir. Karakter sýnýflar kabuk arama þablonlarýna benzer anlamda tanýmlanmýþ olabilir. Bu yüzden “[a-e]” düzenli ifadeleri, a’dan e’ye herhangibir karakterle eþleþir ve “a[xy]b” düzenli ifadesi “axb” veya “ayb” ile eþleþir. Kabukta olduðu gibi aralýklar birleþtirilmiþtir. “[A-Za-z]” düzenli ifadesi tüm büyük ve küçük harflerle eþleþir ama bir aralýðýn tanýmlanmasý deðiþik þekillerdede yapýlabilir:”[^abc]” düzenli ifadesi  “a”,”b” ve “c” dýþýndaki tüm karakterlerle eþleþir(kabukta “[!abc]” ile gösterilir.). nokta “.” Kabuk arama þablonu içinde soru iþaretine karþýlýk gelir, sadece 1 karakterle eþleþecektir. Tek bir istisna “\n” karakteridir. Bu yüzden “a.c”, “abc”, “a/c” gibi ifadelerle eþleþir ama birden çok satýr yapýsýyla eþleþmez.
a
c
çoðu program satýr satýr iþlendiðinden  ve çoklu satýr yapýlarýný iþletmek daha zor olacaðýndan çoklu satýr yapýsýna yer verilmez. (bazen bunu yapmanýn güzel olmayacaðýný söylemiyoruz.)
kabuk arama þablonlarýnýn her zaman bir dosya isminin baþýndan baþlayarak  eþlemesi gerekiyorken program içerisinde seçili satýrlara dayalý programlarda düzenli ifadeler üzerinde genellikle sondan baþlanýr. Burada düzenli ifade satýrda herhangibir yerde eþleþmesi gerekir. Siz bunu ayýrabilirsiniz ancak bir þapka(“^”) karakteri ile baþlayan düzenli ifadeler yalnýzca satýr baþýnda eþleþme yapar, ve dolar (“$”) iþaretiyle biten bir ifade sadece satýr sonunda eþleþme yapar. Her bir satýrýn sonundaki alt satýr karakteri yoksayýlýr. Böylece “xyz” ile biten tüm satýrlarý seçmek için “xyz\n$” yazmak zorunda kalmak yerine “xyz$” kullanabilirsiniz.
Daha ciddi konuþursak “^” ve “$” iþareti satýrýn baþlangýcýndaki görünmez kavramsal karakterlerle eþleþir ve satýrýn sonunda yeni satýr karakterinin hemen solundaki görünmez karakterle eþleþir. 
Son olarak, “*”ratgelel tekrar edilmiþ önce gelen tüm düzenli ifadeleri göstermek için kullanabilirsiniz(tamamýný içermeyen). Yýldýzýn kendisi giriþ olarak herhangibir karakteri tutmaz ama sadece önceki ifadeyi deðiþtirir. Sonuç olarak kabuk arama þablonu “a*.txt”, “^a.*\\.txt ” düzenli ifadesine karþýlýk gelir(burada düzenli ifadenin baþlangýcýnda ve girdi satýrýnýn sonunda “anchoring” olduðunu ve bitiþik noktanýn herhangibir karakterle eþleþtiðini hatýrlayýn.) tekrar birleþmenin üzerinde önceliðe sahiptir;”ab*” bir “a ”nýn peþinden gelen bir veya daha fazla “b”yi ifade eder(hiç olmayan yoktur),”ab”nin birden fazla sayýda tekrarý olmaz.
7.1.1 Düzenli Ýfadeler:Ekstralar
Önceki bölümün açýklamalarý düzenli ifadelerle uðraþan nerdeyse tüm Linux programlarýna uygulanabilir. Çeþitli programlar ya notasyonel yada ek iþlevselliði saðlayarak farklý geliþmiþ uzantýlarý destekler. 
1.	Bu bilgisayar bilimlerinden bir terimdir ve harflerin kümesinden seçilen harflerin birleþmesinden sonuçlanana stringlerin küme davranýþlarýnýn bir metodunu tanýmlar ve onlarýn sýnýrsýz tekrarýný gösterir. Rutin olarak düzenli ifadeleri tanýmak programlama dili derleyicileri gibi çoðu program bloklarýný orta seviyede inþa etmektir.düzenli ifadeler Unix’in önceki versiyonlarýnda gözükür. Unix’in önceki geliþtiricileri bilgisayar bilimleri tabanýna sahipti böylece bu fikir onlara dahada tanýdýk gelmektedir. 
En iyi gerçekleþtirimler, þuan Tcl , Perl, veya Python benzeri modern betik dilleri içinde bulunur. Bu dillerin gerçekleþtirimleri orjinal bilgisayar bilimleri içinde düzenli ifadelerin gücünü þimdiye kadar aþmýþtýr. 
Bazý yaygýn uzantýlar:
Kelime ayýraçlarý: “\<” bir harften önce gelen harf olmayan yer eyerleþen kelimenin baþlangýcýnda karþýlaþýlýr. Benzer olarak, “\>”  non-terminal tarafýndan takip edilen terminalin olduðu yerdeki kelimenin sonunda karþýlaþýlýr.
Gruplama:parantezler “((...))” düzenli ifadelerin birleþiminin tekrarýna izin verir. “a(bc)*” ifadesi “a”dan sonra “bc”nin bir veya daha fazla tekrarýný temsil eder.
Alternatif:  Dikey çubukla (“|”) birden çok düzenli ifade arasýndan seçim yapýlabilir. (burda kitaptaki ingilizce örnek yerine yeni bir örnek uydurdum)“hava(alaný|limaný|sahasý)” ifadesi, “havalimaný” , “havasahasý” ve “havaalaný” ný temsil edebilir. Fakat tek baþýna “hava” olmaz.
Seçimli ifadeler: soru iþareti (“?”) düzenli ifadelerin seçimli olmasýný saðlar. Ya bir kez gelir yada hiç olmaz.  	“uçak(savar)?” ifadesi ya “uçak” yada “uçaksavar” ý temsil eder.
En az bir tekrar:  (“+”) iþareti (“*”) operatörüne en az bir kez bir düzenli ifade içermesi haricinde tamamen aynýdýr. 
Belirli tekrar sayýlarý: parantezler içinde minimum ve maksimum tekrar sayýlarýný belirtebilirsiniz. “ab{2,4}” ifadesi “abb”,”abbb” ve “abbbb” ifadelerini temsil eder ama “ab” yada “abbbbbb” ifadelerini temsil etmez. Minimum ve maksimum sayýyý es geçebilirsiniz. Eðer minimum sayýsý yoksa 0 kabul edilir, maksimum sayý yoksa  “sonsuz” kabul edilir.
Geri-referans: “\\n” benzeri bir ifadeyle parantezli ifade olmaksýzýn girdinin bir bölümünün tekrarýný gösterebilirsiniz. Düzenli ifade içindeki n, hayýr anlamýna gelir. Mesel a “(ab)\\1” ifadesi “abab” ile eþleþir. “(ab*a)x\1” ifadesi ise parantezler “abba” ile eþleþir ve tüm ifade “abbaxabba” ile eþleþir(baþka hiçbirþeyle eþleþmez). Daha fazla ayrýntýyý GNU grep’in dökümanlarý içinde mevcuttur.
Aç gözlü olmayan(non-greedy) eþleþme: “*” , “+” ve “?” operatörleri genellikle açgözlüdür. Onlar mümkün olduðunca çok sayýda girdiyle eþleþmeye çalýþýrlar:”^a.*a” ifadesi “abacada” giriþ stringine uygulanýr. Sadece “aba” yada “abaca”ya uygulanamaz. Ancak açgözlü olmayan versiyonlarýda vardýr. “*?” ,”+?” ve “??” açgözlü olmayan versiyonlara karþýlýk gelir. Bunlar mümkün olduðu kadar az girdiyle eþleþmeye çalýþýrlar. Büzüm örneðimizde “a.*?a” , “aba” ile eþleþebilir. Parantez operatörüde aç gözlü olmayan versiyonu saðlayabilir.
Her program her uzantýyý desteklemez. Tablo 7.1 çok önemli programlarý kýsaca gösterir.. Emacs, Perl ve Tcl burada tartýþýlmayan bir çok uzantýyý destekler.
7.2 Dosya içinde metin arama – grep
Düzenli ifadeyi kullanan en önemli Linux programlarýndan biri grep’tir. Verilen düzenli ifade ile eþleþen metinleri dosya içindeki satýrlarda arar. Eþleþen satýrlar çýktý olarak verilir,eþleþmeyenler atýlýr.
Grep’in iki çeþidi vardýr. Geleneksel olarak stripped-down fgrep (“sabit”) düzenli ifadelere izin vermez. Karakter stringlerine ayrýlmýþtýr ama çok hýzlýdýr. egrep(“geliþmiþ”) ek düzenli ifade operatörleri sunar ama çok daha yavaþtýr ve daha fazla hafýzaya ihtiyaç duyar.
7.1 tablosu(tablo yazmadým)--- notlar:1. Öncesinde “\” gerektirir. Mesela “ab+” yerine “ab\+” kullanýlýr. 2. Paranteze ihtiyaç duymaz; alternatifler her zaman tüm ifadeyi gösterebilir.3. “\=”,”?”nin yerine kullanýlýr. 4. Tamamen farklý sözdizimi(dökümanlara bakýn).
Tablo 7.2 grep parametreleri
-c 	(sayma)		eþleþen satýrlarýn sayýsýný verir.
-i	(yoksayma)	küçük büyük harfler eþittir
-l	(listeleme)	eþleþen dosyalarýn isimlerini verir. Gerçek eþleþme deðildir.
-n	(sayý)		çýktýdaki eþleþen satýrlarýn numaralarýný verir.
-r	(rekürsif)	alt dizinlerdeki dosyalarýda arar.
-v	(ters çevirmek)	düzenli ifadeyle eþleþmeyen satýrlarý verir.
Bu gözlemler bazý uzantýlar için doðru olabilir. Özel olarak grep ve egrep düzenli ifade geliþimi için tamamiyle farklý algoritmalar kullanýlýr. Bu geliþim girdinin boyutuna ayný zamanda düzenli ifade yapýsýnýn boyutuna baðlý olarak performans sonuçlarýný farklý þekilde elde etmeye çalýþýr. grep’in yaygýn Linux daðýtýmlarýyla birlikte 3 çeþidide gerçekte ayný programdýr. Onlar arama þablonlarý için izin verdikleri söz dizimiyle ayrýlýrlar.
grep’in sözdizimi en az bir düzenli ifade gerektirir. Bu metin dosyasýnýn veya dosyalarýnýn isimleri tarafýndan takip edilir. Eðer hiçbir isim belirtilmemiþse grep standart bir girdiye iþaret eder(bölüm 8’e bakýn)
Girdi içerisinde araþtýrmak için bir düzenli ifade bölüm 7.1’den temel düzenli ifadelerin yanýnda bölüm 7.1.1 deki geliþmiþ düzenli ifadelerin çoðunuda taþýyabilir. grep’le “\+”,”\?” ve “\{” operatörleri ters bölü(back slash) tarafýndan takip edilmelidir. (egrep için bu gerekli deðildir.) malesef hiç aç gözlü olmayan operatör yoktur. 
Eðer kabuk arama þablonuna benzerse ve tek bir karakter stringinden daha karmaþýksa kabuðun düzenli ifadeyi geniþletmeye çalýþmasýný önlemek için düzenli ifadeleri tek týrnak içine almalýsýnýz.
Düzenli ifadeler ek olarak komut satýrýnda çeþitli parametreler yazýlabilir. (Tablo 7.2’ye bakýn.)
-f (“dosya”)parametresiyle arama þablonu bir dosyadan okunmuþ olabilir. Eðer dosya birden çok satýr taþýrsa her satýrýn içeriði onun kendi saðýnda eþzamanlý olarak araþtýrýlmýþ bir arama olarak gözönüne alýnacaktýr. Bu arama þablonlarýnýn sýklýkla kullanýlabilmesi için özellikle düþünülmüþ biþeydir. 
Bahsettiðimiz gibi fgrep arama þablonu olarak düzenli ifadeleri kullanmaz. egrep düzenli ifadeler için en uygun uzantýlarý mevcut duruma getirir(tablo 7.1).
Son olarak grep için bazý örnekler. frog.txt dosyasý Kurbaða Kralýn peri masalý Grimm Kardeþleri içerir. (ek bölüm B’ye bakýn). frog karakter setini taþýyan tüm satýrlar þu þekilde bulunur.
$ grep frog frog.txt
Frog stretching forth its big, ugly head from the water. >>Ah,old
>>Be quiet, and do not weep,<< answered the frog, >> I can help you, but
>>Whatever you will have, dear frog,<<said she,>>My clothes,my pearls

Açýkça “frog” kelimesini (“bullfrog” veya “frogspawn” benzeri  varyasyonlarýný bulmayacak) aramak için kelime ayýracý uzantýsýna ihtiyaç duyarsýn. )
$ grep \<frog\> frog.txt
frog stretching forth its big, ugly head from the water. >> Ah, old
(Bu ingilizce olmasý farketmez. Dil ne olursa olsun “frog” geçen her satýr gösterilir.)frogla baþlayan satýrlarý göstermek için aþaðýdaki komut yazýlýr.
$ grep ^frog  frog.txt
frog stretching forth its big, ugly head from the water. >> Ah, old
frog, that he had caused three iron bands to be laid roun his heart,

Farklý bir örnek: “/usr/share/dict/words” dosyasý ingilizce kelimelerin bir dosyasýný içerir(sözlük olarak adlandýrýlýr)2. Burada 3 veya daha fazla “a”  içeren tüm kelimelerle ilgilenmekteyiz.
$ grep –n ‘a.*a.*a’ /usr/share/dict/words
8:aardvark
21:abaca
22:abacate
...
234831:zygomaticoaruricularis
234832:zygomaticofacial
234834:zygomaticomaxillary
(sýrasýyla): bir afrika hayvaný (orycteropus afer), iplik yapýmýnda kullanýlan muz(musa textilis),avokadonun Brezilyacasý(perse sp.))
Daha karmaþýk düzenli ifadelerle birlikte bir satýr grep çýktýsý çabucak kötü hale gelebilir. Bu –color parametresi kullanýlarak bu karmaþýklýk kesin olarak azaltýlabilir. Buda belirli renkler içerisinde bir dosyanýn bölümlerindeki eþleþmeyi gösterebilir.
$ grep –color root /etc/passwd
root:x:0:0:root:/root:/bin/bash

“export GREP_OPTIONS=’---color=auto’”(mesela,” ~/.profile” içinde)benzeri bir komut kalýcý bir temel üzerinde bu parametreyi kullanýlabilir hale getirir; auto argümaný eðer çýktý bir boruya veya dosyaya gönderilirse rengi deðiþtirerek gösterir.
2.daðýtýma baðlý olarak sözlüðün boyutu deðiþebilir.

Alýþtýrmalar
7.1[2]”?” ve “+”  düzenli operatörleri gerçekten gerekli midir?
7.2[!1] frog.txt içinde “king” veya ”king’s daughter” kelimelerini içeren satýrlarý bulun.
7.3[!2] “/etc/passwd” içinde sistem üstündeki kullanýcýlarýn listesi vardýr. Dosyanýn her bir satýrý kullanýcýlar tarafýndan ayrýlmýþ alanlarýn bir sýrasýný içerir. Her satýrdaki son alan kullanýcý için giriþ kabuðu verir. Giriþ kabuðu olarak bash kullanan bütün kullanýcýlarý listeleyen grep komut satýrý yazýn.
7.4[3] /usr/share/dict/words  5 sesli harfi “a”,”e”,”i”,”o” ve “u” sýrasýnda taþýyan kelimeleri ara(sessiz harfler önünde ortasýnda veya sonunda olabilir.)
7.5[4]içinde 2 kez  enaz 4 harf içeren kelimelerin olduðu(”Frog King” gibi ) satýrlarý bulun.
Bu bölümdeki komutlar
egrep	belirli düzenli ifadelerle eþleþen satýrlar için dosyalarý arar. Geliþmiþ düzenli ifadelere izin verir.							grep(1) 97
fgrep	belirli içerikle satýrlar için dosyalarý arar. Düzenli ifadelere izin yoktur.  fgrep(1) 97
grep	verilmiþ düzenli ifadeyle eþleþen tüm satýrlar için dosyalarý arar.		grep(1)97 
Özet
Düzenli ifadeler karakter stringlerinin kümesini tanýmlamak için çokgüçlü bir metottur.
grep ve onun iliþkisel aramasý düzenli ifadelerle eþleþen satýrlar için bir dosyanýn içerdiði aramadýr.
